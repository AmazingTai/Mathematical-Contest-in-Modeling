x=[20231
19783
19271
20076
19703
20130
19371
19465
20230
19566
19095
18821
19199
18911
18760
18475
18562
18312
18208
17913
18476
18074
18350
17750
18494
18389
17912
17271
17170
16456
17206
18298
18508
18234
18077
17813
18019
18017
17659
17982
18579
19747
20478
19033
20246
22169
22586
25743
26519
26168
27137
28045
29379
30690
31386
33998
35417
34931
37580
36663
37679
39839
40958
41653
43751]';
% 该脚本用来做NAR神经网络预测
lag=3;    % 自回归阶数
iinput=x;    % x为原始序列（行向量）
n=length(iinput);

%准备输入和输出数据
inputs=zeros(lag,n-lag);
for i=1:n-lag
    inputs(:,i)=iinput(i:i+lag-1)';
end
targets=x(lag+1:end);

%创建网络
hiddenLayerSize = 10; %隐藏层神经元个数
net = fitnet(hiddenLayerSize);

% 避免过拟合，划分训练，测试和验证数据的比例
net.divideParam.trainRatio = 75/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

%训练网络
[net,tr] = train(net,inputs,targets);
%% 根据图表判断拟合好坏
yn=net(inputs);
errors=targets-yn;
figure,plotresponse(con2seq(targets),con2seq(yn))   %看预测的趋势与原趋势

%% 下面预测往后预测几个时间段
fn=12;  %预测步数为fn

f_in=iinput(n-lag+1:end)';
f_out=zeros(1,fn);  %预测输出
% 多步预测时，用下面的循环将网络输出重新输入
for i=1:fn
    f_out(i)=net(f_in);
    f_in=[f_in(2:end);f_out(i)];
end
% 画出预测图
figure,plot(0:64,iinput,'b',64:76,[iinput(end),f_out],'r')

%%三亚
x=[7578
7649
7527
7305
7475
7492
7454
7437
7528
7433
7382
7399
7492
7663
7542
7312
7389
7348
7409
7234
7315
7395
7317
7268
7459
7499
7554
7440
7354
7326
7267
7237
7549
7465
7513
7744
7654
7661
7655
7729
7926
7901
7923
7920
8154
8224
8610
9421
9800
10312
11221
11628
12175
12537
12367
12851
13173
13441
13598
14435
14791
15920
16073
18041
20502]';
